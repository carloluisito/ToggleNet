@model SampleWebApp.Models.HomeViewModel
@{
    ViewData["Title"] = "Home";
}

<div class="container py-4">
    <div class="row mb-4">
        <div class="col">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">ToggleNet Sample Application</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div>
                            <p class="mb-0">This is a sample application demonstrating the ToggleNet feature flag system with usage tracking.</p>
                        </div>
                        <a href="/feature-flags/analytics" class="btn btn-outline-primary">
                            <i class="bi bi-graph-up me-2"></i> View Analytics
                        </a>
                    </div>
                    
                    <div class="alert alert-info">
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-person-circle fs-3 me-3"></i>
                                <div>
                                    <p class="mb-1">Current user: <strong>@Model.UserId</strong></p>
                                    <a asp-action="ChangeUser" class="btn btn-sm btn-outline-secondary">Change User</a>
                                </div>
                            </div>
                            <div class="d-flex align-items-center">
                                <label class="form-check-label me-2">Feature Tracking:</label>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="trackingToggle" checked>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-success">
                        <h6 class="alert-heading mb-2">
                            <i class="bi bi-target me-2"></i>Targeting Rules Examples
                        </h6>
                        <p class="mb-2">Explore advanced targeting rules functionality:</p>
                        <div class="d-flex flex-wrap gap-2">
                            <a href="/TargetingExample" class="btn btn-sm btn-outline-success">
                                <i class="bi bi-code-slash me-1"></i>API Examples
                            </a>
                            <a href="/TargetingExample/Dashboard" class="btn btn-sm btn-outline-success">
                                <i class="bi bi-gear me-1"></i>Dashboard Guide
                            </a>
                            <a href="/TargetingExample/TestUserScenarios" class="btn btn-sm btn-outline-success">
                                <i class="bi bi-people me-1"></i>Test Scenarios
                            </a>
                            <a href="/feature-flags/targeting-rules" class="btn btn-sm btn-success">
                                <i class="bi bi-sliders me-1"></i>Configure Rules
                            </a>
                        </div>
                    </div>

                    <div class="alert alert-warning">
                        <h6 class="alert-heading mb-2">
                            <i class="bi bi-clock me-2"></i>Time-Based Scheduling Examples
                        </h6>
                        <p class="mb-2">Explore automated feature flag scheduling capabilities:</p>
                        <div class="d-flex flex-wrap gap-2">
                            <a href="/SchedulingExample" class="btn btn-sm btn-outline-warning">
                                <i class="bi bi-rocket-takeoff me-1"></i>Product Launches
                            </a>
                            <a href="/SchedulingExample" class="btn btn-sm btn-outline-warning">
                                <i class="bi bi-lightning-fill me-1"></i>Flash Sales
                            </a>
                            <a href="/SchedulingExample" class="btn btn-sm btn-outline-warning">
                                <i class="bi bi-tools me-1"></i>Maintenance Windows
                            </a>
                            <a href="/feature-flags/scheduling" class="btn btn-sm btn-warning">
                                <i class="bi bi-calendar3 me-1"></i>Scheduling Dashboard
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Feature Status</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3 d-flex justify-content-between align-items-center">
                        <div>
                            <strong>New Dashboard:</strong>
                            @if (Model.NewDashboardEnabled)
                            {
                                <span class="badge bg-success ms-2">Enabled</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary ms-2">Disabled</span>
                            }
                        </div>
                        <button class="btn btn-primary btn-sm use-feature" data-feature="new-dashboard" @(!Model.NewDashboardEnabled ? "disabled" : "")>
                            <i class="bi bi-play-circle me-1"></i> Try It
                        </button>
                    </div>

                    <div class="mb-3 d-flex justify-content-between align-items-center">
                        <div>
                            <strong>Beta Features:</strong>
                            @if (Model.BetaFeaturesEnabled)
                            {
                                <span class="badge bg-success ms-2">Enabled</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary ms-2">Disabled</span>
                            }
                        </div>
                        <button class="btn btn-primary btn-sm use-feature" data-feature="beta-features" @(!Model.BetaFeaturesEnabled ? "disabled" : "")>
                            <i class="bi bi-play-circle me-1"></i> Try It
                        </button>
                    </div>

                    <div class="mb-3 d-flex justify-content-between align-items-center">
                        <div>
                            <strong>Dark Mode:</strong>
                            @if (Model.DarkModeEnabled)
                            {
                                <span class="badge bg-success ms-2">Enabled</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary ms-2">Disabled</span>
                            }
                        </div>
                        <button class="btn btn-primary btn-sm use-feature" data-feature="dark-mode" @(!Model.DarkModeEnabled ? "disabled" : "")>
                            <i class="bi bi-play-circle me-1"></i> Try It
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">All Feature Flags</h5>
                </div>
                <div class="card-body">
                    @if (Model.AllFlags.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm mb-0">
                                <thead>
                                    <tr>
                                        <th>Flag</th>
                                        <th>Status</th>
                                        <th>User Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var flag in Model.AllFlags)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@flag.Name</strong>
                                                @if (!string.IsNullOrEmpty(flag.Description))
                                                {
                                                    <br><small class="text-muted">@flag.Description</small>
                                                }
                                                
                                                <!-- Additional info badges -->
                                                <div class="mt-1">
                                                    @if (flag.UseTargetingRules)
                                                    {
                                                        <span class="badge bg-info badge-sm">Targeting</span>
                                                    }
                                                    @if (flag.UseTimeBasedActivation)
                                                    {
                                                        <span class="badge bg-warning badge-sm">Scheduled</span>
                                                    }
                                                    @if (flag.RolloutPercentage < 100 && !flag.UseTargetingRules)
                                                    {
                                                        <span class="badge bg-secondary badge-sm">@flag.RolloutPercentage%</span>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                @if (flag.IsEnabled)
                                                {
                                                    @if (flag.UseTimeBasedActivation && !flag.IsTimeActive)
                                                    {
                                                        <span class="badge bg-warning text-dark">Scheduled</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-success">Enabled</span>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Disabled</span>
                                                }
                                            </td>
                                            <td>
                                                @if (flag.IsEnabledForUser)
                                                {
                                                    <span class="badge bg-success">✓ Enabled</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">✗ Disabled</span>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-outline-primary btn-sm use-feature" 
                                                        data-feature="@flag.Name" 
                                                        @(!flag.IsEnabledForUser ? "disabled" : "")
                                                        title="@(flag.IsEnabledForUser ? "Test this feature" : "Feature not enabled for this user")">
                                                    <i class="bi bi-play-circle me-1"></i>Test
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-flag fs-2 text-muted d-block mb-2"></i>
                            <p class="text-muted">No feature flags found.</p>
                            <a href="/feature-flags" class="btn btn-primary btn-sm">
                                <i class="bi bi-plus-circle me-1"></i>Create Feature Flags
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (Model.NewDashboardEnabled)
    {
        <div class="row">
            <div class="col">
                <div class="alert alert-info">
                    <h4 class="alert-heading">New Dashboard Feature</h4>
                    <p>You are seeing the new dashboard feature because it is enabled for your user.</p>
                </div>
            </div>
        </div>
    }

    @if (Model.BetaFeaturesEnabled)
    {
        <div class="row">
            <div class="col">
                <div class="alert alert-warning">
                    <h4 class="alert-heading">Beta Features</h4>
                    <p>You are seeing the beta features because they are enabled for your user.</p>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="col">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Feature Usage Log</h5>
                </div>
                <div class="card-body">
                    <div id="featureUsageLog" class="border rounded p-3 bg-light" style="max-height: 200px; overflow-y: auto;">
                        <div class="text-center text-muted">
                            <i>Usage log will appear here when features are accessed</i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (Model.DarkModeEnabled)
{
    <script>
        document.body.classList.add('dark-mode');
    </script>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            // Handle tracking toggle
            $('#trackingToggle').on('change', function() {
                var isEnabled = $(this).prop('checked');
                
                // Log the change
                var timestamp = new Date().toLocaleTimeString();
                var logEntry = $('<div class="mb-2"></div>');
                
                $.ajax({
                    url: '@Url.Action("ToggleTracking")',
                    type: 'POST',
                    data: { enabled: isEnabled },
                    success: function(result) {
                        if (result.success) {
                            logEntry.html('<span class="text-info">[' + timestamp + ']</span> <strong>Tracking:</strong> ' + 
                                (isEnabled ? 'Enabled' : 'Disabled'));
                        } else {
                            logEntry.html('<span class="text-danger">[' + timestamp + ']</span> <strong>Tracking:</strong> Failed to update');
                        }
                        
                        // Add the log entry to the top of the log
                        $('#featureUsageLog').prepend(logEntry);
                        
                        // Remove the empty message if it exists
                        $('#featureUsageLog .text-muted').remove();
                    },
                    error: function() {
                        logEntry.html('<span class="text-danger">[' + timestamp + ']</span> <strong>Tracking:</strong> Error updating setting');
                        
                        // Add the log entry to the top of the log
                        $('#featureUsageLog').prepend(logEntry);
                        
                        // Remove the empty message if it exists
                        $('#featureUsageLog .text-muted').remove();
                        
                        // Reset the toggle to match the server state
                        $(this).prop('checked', !isEnabled);
                    }
                });
            });
            
            // Handle feature usage button clicks
            $('.use-feature').on('click', function () {
                var feature = $(this).data('feature');
                var button = $(this);
                
                // Disable the button while processing
                button.prop('disabled', true);
                
                $.ajax({
                    url: '@Url.Action("UseFeature")',
                    type: 'POST',
                    data: { featureName: feature },
                    success: function (result) {
                        // Log the usage
                        var timestamp = new Date().toLocaleTimeString();
                        var logEntry = $('<div class="mb-2"></div>');
                        
                        if (result.success) {
                            logEntry.html('<span class="text-success">[' + timestamp + ']</span> <strong>' + feature + '</strong>: ' + result.message);
                        } else {
                            logEntry.html('<span class="text-danger">[' + timestamp + ']</span> <strong>' + feature + '</strong>: ' + result.message);
                        }
                        
                        // Add the log entry to the top of the log
                        $('#featureUsageLog').prepend(logEntry);
                        
                        // Remove the empty message if it exists
                        $('#featureUsageLog .text-muted').remove();
                        
                        // Re-enable the button
                        button.prop('disabled', false);
                    },
                    error: function () {
                        // Log the error
                        var timestamp = new Date().toLocaleTimeString();
                        var logEntry = $('<div class="mb-2 text-danger"></div>');
                        logEntry.html('<span>[' + timestamp + ']</span> <strong>' + feature + '</strong>: Error processing request');
                        
                        // Add the log entry to the top of the log
                        $('#featureUsageLog').prepend(logEntry);
                        
                        // Remove the empty message if it exists
                        $('#featureUsageLog .text-muted').remove();
                        
                        // Re-enable the button
                        button.prop('disabled', false);
                    }
                });
            });
        });
    </script>
}
