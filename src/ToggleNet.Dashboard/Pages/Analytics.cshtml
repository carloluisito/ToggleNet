@page
@model ToggleNet.Dashboard.Pages.AnalyticsModel
@{
    ViewData["Title"] = "Feature Analytics";
    Layout = "_Layout";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="mb-1">Feature Analytics</h1>
            <p class="text-muted">Usage data for <span class="badge bg-primary">@Model.Environment</span> environment</p>
        </div>
        <div class="d-flex gap-3 align-items-center">
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="trackingToggle" @(Model.IsTrackingEnabled ? "checked" : "")>
                <label class="form-check-label" for="trackingToggle">
                    @(Model.IsTrackingEnabled ? "Tracking Enabled" : "Tracking Disabled")
                </label>
            </div>
            <div class="dropdown">
                <button class="btn btn-outline-primary dropdown-toggle" type="button" id="timeframeDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    @Model.SelectedTimeframe
                </button>
                <ul class="dropdown-menu" aria-labelledby="timeframeDropdown">
                    <li><a class="dropdown-item @(Model.SelectedTimeframe == "Last 7 days" ? "active" : "")" href="?timeframe=7">Last 7 days</a></li>
                    <li><a class="dropdown-item @(Model.SelectedTimeframe == "Last 30 days" ? "active" : "")" href="?timeframe=30">Last 30 days</a></li>
                    <li><a class="dropdown-item @(Model.SelectedTimeframe == "Last 90 days" ? "active" : "")" href="?timeframe=90">Last 90 days</a></li>
                </ul>
            </div>
        </div>
    </div>
    
    <form id="antiforgeryForm" class="d-none">
        @Html.AntiForgeryToken()
    </form>
    
    <div class="row mb-4">
        @foreach (var feature in Model.FeatureUsageStats)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card shadow-sm border-0 h-100">
                    <div class="card-header bg-white py-3">
                        <h5 class="mb-0">@feature.Name</h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center mb-3">
                            <div class="col-6">
                                <h2 class="mb-0">@feature.UniqueUsers</h2>
                                <p class="text-muted mb-0">Unique Users</p>
                            </div>
                            <div class="col-6">
                                <h2 class="mb-0">@feature.TotalUsages</h2>
                                <p class="text-muted mb-0">Total Usages</p>
                            </div>
                        </div>
                        <div class="mt-4" style="height: 200px;">
                            <canvas id="chart-@feature.Name.Replace(" ", "")"></canvas>
                        </div>
                    </div>
                    <div class="card-footer bg-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="small text-muted">
                                @(feature.IsEnabled ? "Enabled" : "Disabled")
                                @if (feature.RolloutPercentage < 100)
                                {
                                    <text>â€¢ @feature.RolloutPercentage% Rollout</text>
                                }
                            </span>
                            <a href="#" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#detailsModal" 
                               data-feature-name="@feature.Name">
                                Details
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-white py-3">
            <h5 class="mb-0">Recent Feature Usage</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th class="ps-4">Feature</th>
                            <th>User</th>
                            <th>Timestamp</th>
                            <th class="pe-4">Additional Data</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!Model.RecentUsages.Any())
                        {
                            <tr>
                                <td colspan="4" class="text-center py-5">
                                    <div class="py-4 text-muted">
                                        <i class="bi bi-bar-chart fs-2 d-block mb-3"></i>
                                        <h5>No usage data found</h5>
                                        <p>Usage data will appear here once features are accessed</p>
                                    </div>
                                </td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var usage in Model.RecentUsages)
                            {
                                <tr>
                                    <td class="ps-4">@usage.FeatureName</td>
                                    <td>@usage.UserId</td>
                                    <td>@usage.Timestamp.ToString("MMM d, yyyy h:mm tt")</td>
                                    <td class="pe-4">@(string.IsNullOrEmpty(usage.AdditionalData) ? "-" : usage.AdditionalData)</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Feature Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Feature Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="feature-details-content">
                <!-- Content will be loaded via JavaScript -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize charts
            @foreach (var feature in Model.FeatureUsageStats)
            {
                <text>
                    const ctx_@(feature.Name.Replace(" ", "")) = document.getElementById('chart-@(feature.Name.Replace(" ", ""))').getContext('2d');
                    new Chart(ctx_@(feature.Name.Replace(" ", "")), {
                        type: 'line',
                        data: {
                            labels: [@Html.Raw(string.Join(",", feature.DailyUsage.Keys.Select(d => $"'{d.ToString("MMM d")}'").ToArray()))],
                            datasets: [{
                                label: 'Daily Usage',
                                data: [@string.Join(",", feature.DailyUsage.Values)],
                                fill: false,
                                borderColor: '#0d6efd',
                                tension: 0.1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: false
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        stepSize: 1
                                    }
                                }
                            }
                        }
                    });
                </text>
            }
            
            // Handle details modal
            const detailsModal = document.getElementById('detailsModal');
            if (detailsModal) {
                detailsModal.addEventListener('show.bs.modal', event => {
                    const button = event.relatedTarget;
                    const featureName = button.getAttribute('data-feature-name');
                    const modalTitle = detailsModal.querySelector('.modal-title');
                    modalTitle.textContent = `${featureName} - Details`;
                    
                    const content = document.getElementById('feature-details-content');
                    content.innerHTML = '<div class="d-flex justify-content-center my-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
                    
                    // Here you would fetch additional details about the feature
                    // For now, we'll just show a placeholder
                    setTimeout(() => {
                        content.innerHTML = `
                            <p>Detailed analytics for ${featureName} will be shown here.</p>
                            <p>Future versions will include:</p>
                            <ul>
                                <li>User demographics</li>
                                <li>Usage patterns by time of day</li>
                                <li>Conversion metrics</li>
                                <li>Exportable reports</li>
                            </ul>
                        `;
                    }, 500);
                });
            }
            
            // Handle tracking toggle
            const trackingToggle = document.getElementById('trackingToggle');
            
            if (trackingToggle) {
                trackingToggle.addEventListener('change', function() {
                    const isEnabled = this.checked;
                    const label = this.nextElementSibling;
                    
                    // Update the label text
                    label.textContent = isEnabled ? 'Tracking Enabled' : 'Tracking Disabled';
                    
                    // Send the request to update the tracking status
                    fetch('?handler=ToggleTrackingAsync', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(isEnabled)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Show a notification
                            const alertDiv = document.createElement('div');
                            alertDiv.className = 'alert alert-success alert-dismissible fade show position-fixed top-0 end-0 m-3';
                            alertDiv.setAttribute('role', 'alert');
                            alertDiv.innerHTML = `
                                <strong>${isEnabled ? 'Enabled' : 'Disabled'}</strong> feature usage tracking.
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            `;
                            document.body.appendChild(alertDiv);
                            
                            // Auto-dismiss after 3 seconds
                            setTimeout(() => {
                                const bsAlert = new bootstrap.Alert(alertDiv);
                                bsAlert.close();
                            }, 3000);
                        } else {
                            console.error('Failed to update tracking status');
                            trackingToggle.checked = !isEnabled; // Revert the toggle
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        trackingToggle.checked = !isEnabled; // Revert the toggle
                    });
                });
            }
        });
    </script>
}
